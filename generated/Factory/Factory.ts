// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PairCreated extends ethereum.Event {
  get params(): PairCreated__Params {
    return new PairCreated__Params(this);
  }
}

export class PairCreated__Params {
  _event: PairCreated;

  constructor(event: PairCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get newSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PairRestarted extends ethereum.Event {
  get params(): PairRestarted__Params {
    return new PairRestarted__Params(this);
  }
}

export class PairRestarted__Params {
  _event: PairRestarted;

  constructor(event: PairRestarted) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PairShutdowned extends ethereum.Event {
  get params(): PairShutdowned__Params {
    return new PairShutdowned__Params(this);
  }
}

export class PairShutdowned__Params {
  _event: PairShutdowned;

  constructor(event: PairShutdowned) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ParamSet extends ethereum.Event {
  get params(): ParamSet__Params {
    return new ParamSet__Params(this);
  }
}

export class ParamSet__Params {
  _event: ParamSet;

  constructor(event: ParamSet) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ParamSet2 extends ethereum.Event {
  get params(): ParamSet2__Params {
    return new ParamSet2__Params(this);
  }
}

export class ParamSet2__Params {
  _event: ParamSet2;

  constructor(event: ParamSet2) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value1(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value2(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Restarted extends ethereum.Event {
  get params(): Restarted__Params {
    return new Restarted__Params(this);
  }
}

export class Restarted__Params {
  _event: Restarted;

  constructor(event: Restarted) {
    this._event = event;
  }
}

export class Shutdowned extends ethereum.Event {
  get params(): Shutdowned__Params {
    return new Shutdowned__Params(this);
  }
}

export class Shutdowned__Params {
  _event: Shutdowned;

  constructor(event: Shutdowned) {
    this._event = event;
  }
}

export class Factory__protocolFeeParamsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  allPairs(param0: BigInt): Address {
    let result = super.call("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPairsLength(): BigInt {
    let result = super.call("allPairsLength", "allPairsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPairsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPairsLength",
      "allPairsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPair(tokenA: Address, tokenB: Address): Address {
    let result = super.call(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );

    return result[0].toAddress();
  }

  try_createPair(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPair(param0: Address, param1: Address): Address {
    let result = super.call("getPair", "getPair(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_getPair(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isLive(): boolean {
    let result = super.call("isLive", "isLive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pairCreator(): Address {
    let result = super.call("pairCreator", "pairCreator():(address)", []);

    return result[0].toAddress();
  }

  try_pairCreator(): ethereum.CallResult<Address> {
    let result = super.tryCall("pairCreator", "pairCreator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeParams(): Factory__protocolFeeParamsResult {
    let result = super.call(
      "protocolFeeParams",
      "protocolFeeParams():(uint256,address)",
      []
    );

    return new Factory__protocolFeeParamsResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_protocolFeeParams(): ethereum.CallResult<
    Factory__protocolFeeParamsResult
  > {
    let result = super.tryCall(
      "protocolFeeParams",
      "protocolFeeParams():(uint256,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__protocolFeeParamsResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  protocolFeeTo(): Address {
    let result = super.call("protocolFeeTo", "protocolFeeTo():(address)", []);

    return result[0].toAddress();
  }

  try_protocolFeeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeTo",
      "protocolFeeTo():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tradeFee(): BigInt {
    let result = super.call("tradeFee", "tradeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tradeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tradeFee", "tradeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pairCreator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tradeFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _protocolFeeTo(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePairCall extends ethereum.Call {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetLiveCall extends ethereum.Call {
  get inputs(): SetLiveCall__Inputs {
    return new SetLiveCall__Inputs(this);
  }

  get outputs(): SetLiveCall__Outputs {
    return new SetLiveCall__Outputs(this);
  }
}

export class SetLiveCall__Inputs {
  _call: SetLiveCall;

  constructor(call: SetLiveCall) {
    this._call = call;
  }

  get _isLive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLiveCall__Outputs {
  _call: SetLiveCall;

  constructor(call: SetLiveCall) {
    this._call = call;
  }
}

export class SetLiveForPairCall extends ethereum.Call {
  get inputs(): SetLiveForPairCall__Inputs {
    return new SetLiveForPairCall__Inputs(this);
  }

  get outputs(): SetLiveForPairCall__Outputs {
    return new SetLiveForPairCall__Outputs(this);
  }
}

export class SetLiveForPairCall__Inputs {
  _call: SetLiveForPairCall;

  constructor(call: SetLiveForPairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get live(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetLiveForPairCall__Outputs {
  _call: SetLiveForPairCall;

  constructor(call: SetLiveForPairCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class SetProtocolFeeToCall extends ethereum.Call {
  get inputs(): SetProtocolFeeToCall__Inputs {
    return new SetProtocolFeeToCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeToCall__Outputs {
    return new SetProtocolFeeToCall__Outputs(this);
  }
}

export class SetProtocolFeeToCall__Inputs {
  _call: SetProtocolFeeToCall;

  constructor(call: SetProtocolFeeToCall) {
    this._call = call;
  }

  get _protocolFeeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolFeeToCall__Outputs {
  _call: SetProtocolFeeToCall;

  constructor(call: SetProtocolFeeToCall) {
    this._call = call;
  }
}

export class SetTradeFeeCall extends ethereum.Call {
  get inputs(): SetTradeFeeCall__Inputs {
    return new SetTradeFeeCall__Inputs(this);
  }

  get outputs(): SetTradeFeeCall__Outputs {
    return new SetTradeFeeCall__Outputs(this);
  }
}

export class SetTradeFeeCall__Inputs {
  _call: SetTradeFeeCall;

  constructor(call: SetTradeFeeCall) {
    this._call = call;
  }

  get _tradeFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTradeFeeCall__Outputs {
  _call: SetTradeFeeCall;

  constructor(call: SetTradeFeeCall) {
    this._call = call;
  }
}
